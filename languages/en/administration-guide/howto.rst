Tuleap HowTo
============

Importing an existing CVS repository in Tuleap
-----------------------------------------------

How to properly install a project team's existing CVS repository into
the Tuleap project specific repository

Preamble
~~~~~~~~

The main thing to understand about Tuleap is \*each\* project has its
own CVS repository. This root dir is created and initialized by Tuleap
whenever a new project is registered. Its name is "/cvsroot/projectname"

I insist on this point because most of the time in many organizations
there is one single CVS repository where all projects are stored. The
problem with this typical organization is that the directory named
"CVSROOT" which contains CVS config and admin files is unique and global
to all projects managed by CVS. The directory named "CVSROOT" contains
files such as "modules" to declare module name aliases, or
commitinfo,rcsinfo and loginfo to trigger specific actions when commit
happens (such as e-mail notification to certain people,etc.), or taginfo
to put constraints on the TAG formats, or readers and writers which are
2 files to allow/deny access to the CVS repo.

If we had one single CVS repository on Tuleap then the unique and
global "CVSROOT" directory would rapidly become a big mess and it would
be extremely difficult to maintain all the project specific
configurations in this single "CVSROOT" directory. Hence the decision to
have one CVS repository per project on Tuleap.

The real work
~~~~~~~~~~~~~

#. Register the project. Tuleap Admin must approve it and wait for the
   30mn cron update to create a fresh /cvsroot/projectname CVS
   repository with a fresh CVSROOT directory in it. If you are in a
   hurry you can force the cron update by hand.
#. Ideally the tar file provided by the team should provide both the CVS
   top directories **\*PLUS\*** the "CVSROOT" directory from the
   original CVS repository.
#. Having the CVSROOT in the tarball is not mandatory but if the project
   had any specific settings in any of the CVS administration file (see
   above) then there is no chance that the Tuleap admin can rebuilt the
   same environment on Tuleap. In practice very few projects actually
   use these admin files but you can't never know hence the request for
   the CVSROOT directory to be included in the tarball. One file that is
   always used though is the CVSROOT/history file where all the actions
   like commit, add, checkout, etc. are automatically logged by CVS. If
   the team wants this file to be preserved then again the CVSROOT has
   to be provided
#. Create a temporary directory:
   ``cd /tmp mkdir projectnamecd projectname``
#. Unpack the cvs tarball provided by the project team in this temporary
   directory:
   `` tar xvfz projectname_cvstarball.tgz``
#. Assuming that the structure is now as follows

   ::

       /tmp/projectname
          - CVSROOT
              - history  (as well as ,v files)
              - modules
              - commitinfo
              - .....
          - top_level_dir1 
          - top_level_dir2 
          - ....
          - top_level_dirN

#. Move all top project dir to the project specific repo:
   ``mv top_level_dir*  /cvsroot/projectname/``
   **Caution!!** Leave the CVSROOT directory in place for the moment
#. Go to the project CVS repo:
   ``cd /cvsroot/projectname``
#. Change the ownership of the entire CVS repo:
   ``chown -R projectadminname.projectname top_level_dir*``
   where projectadminname is the Tuleap login of the project
   administrator
#. The CVS admin files in the CVSROOT directory must be examined one by
   one and the project specific instructions must be merged with the
   files by the same name in the CVSROOT directory created by Tuleap.

   -  **\*\*Never touch\*\*** the CVSROOT/readers, writers, passwd and
      config files created by Tuleap
   -  Be careful not to overwrite what is already in the CVSROOT/loginfo
      and val-tags file. Append the content of these given files at the
      end of the corresponding ones generated by Tuleap.
   -  For the history file : extract the lines belonging to the hosted
      project from the history file provided by the project team
      (remember it is very likely that this file is global to many
      projects) and update the content (especially the name of the
      directories and path listed in the history file if they are not
      the same on Tuleap)
   -  For all the other files, look at them one by one and see if there
      are project specific settings in it. If so append the settings at
      the end of the corresponding Tuleap files.

#. Delete the temporary directory: ``rm -rf /tmp/projectname``
#. Ask the project team to perform a checkout as explained on their CVS
   project page to check that everything is working fine.

That's all folks!

Regenerating a fresh CVS or SVN repository for a Tuleap project
----------------------------------------------------------------

*When the first import goes wrong or the project team screwed up
everything and want to start again from scratch*

The fastest and safest way (where xxx is the project name):

-  Log as root
-  cd /cvsroot for a CVS repository, or cd /svnroot for a SVN repository
-  Make a backup copy of the current tree in /tmp just in case...:
   ``tar cvfz /tmp/xxx_repository.tgz ./xxx   ``
-  Delete the CVS or SVN tree:
   ``rm -rf  xxx``
-  Wait for the SYSTEM_CHECK system event to run.
-  Delete corresponding entries from cvs\_checkins, cvs\_commits and
   cvs\_descs tables to prevent showing them while browsing commits with
   viewVC.

Now you have a fresh CVS or SVN repository and the team can start the
import again.

How to delete a user
~~~~~~~~~~~~~~~~~~~~

Project member
^^^^^^^^^^^^^^

If the user was part of a project then do the following:

-  Set the Web status to 'Deleted'
-  Set the Unix Status to 'Suspended'

The Unix account is deleted for real, the user home directory is deleted
as well.

Change privileged account passwords
-----------------------------------

*Steps to change privileged account passwords*

Some companies have specific policies regarding passwords.

**root** account:
 1) Change *unix* password from **root**account:
 password (cr)
 [enter new password]
 [retype new password to confirm]
 2) Change *mysql* password:
 mysqladmin --user=root -p password [new\_password]
 enter password: [enter old password]

**codendiadm** account:
 1) Change *unix* password from **codendiadm** account:
 password (cr)
 [enter new password]
 [retype new password to confirm]
 2) Change *mysql*password:
 mysqladmin --user=codendiadm -p password [new\_password]
 enter password: [enter old password]
 3) Modify /etc/tuleap/conf/database.inc
- change **codendiadm** password

**admin** account:
 - The "admin" account is the first user that is created when a new
Tuleap site is created.
 - The "admin" account is used as an "administrator" for orphaned
projects.
 - The "admin" *unix* account is not a privileged account.
 - If you have defined other site administrators, you might as well
suspend the "admin" account (thus, you won't need to update its
password).
 1) Change *unix* and *mysql* password for **admin** from Tuleap
website:
 - Go to the Tuleap web site
 - Log in as **admin**
 - Click "Account Maintenance" in left bar
 - Click "[Change Password]"
 - Follow directions for changing password

**mailman** account:
 - The "mailman" account has the universal password for mailing lists.
 1) su -
 2) cd /usr/lib/mailman/bin
 3) ./mmsitepass
 [enter new password when prompted]
 4) Change *unix* password from **root** account:
 password mailman
 [enter new password when prompted]
 [retype new password to confirm]
 - To test the mailman account:
 - Go to http://lists.example.com/mailman/admin
 - Click on any mailing list
 - Type new global admin password
 If you see the admin page of the selected mailing list, then it is OK.

Enabling 'Restricted Users' on a Tuleap server
-----------------------------------------------

Overview
~~~~~~~~

One of Tuleap main benefits is to enable code sharing and re-usability
in a corporation. The goal is to provide visibility of your project and
code in the whole community of users. Still, in some cases, this
visibility becomes an issue:

-  When Tuleap is used for customer interaction, e.g. to collect
   customer support requests and bugs.
-  when some project members are from other companies (contractors), and
   should not have access to the whole site

In both cases, external people (customers and contractors) need an
access to the server; yet, they should not be granted access to all the
other projects hosted on Tuleap.

A solution to this problem has already been put in place: use two
servers instead of one (one for internal use, one for 'partners'). Yet,
there is an issue with projects that are being developed internally and
that have customer feedback. In this case, you need to duplicate the
project, which is not convenient; customers cannot access commit pages
referenced in commit emails (because they point to the internal
server),etc.

Now, there is another solution by enabling restricted users on your
server: these users (typically, external users), are granted access to
their project pages only, and are denied access to any other page (other
projects, software map, etc.). Normal users still have access to the
whole server.

Configuration
~~~~~~~~~~~~~

local.inc
^^^^^^^^^

In order to setup restricted users, you need a coherent local.inc.

Edit /etc/tuleap/conf/local.inc and make sure that the following
variables are properly set:

::

    $sys_user_approval = 1;
    $sys_is_project_public = 1;
    $sys_allow_anon = 0;
    $sys_allow_restricted_users = 1;

Some explanation:

-  **$sys\_user\_approval = 1** is needed because it is during the user
   approval phase that the Tuleap administrator is able to set the user
   status to 'Restricted' (R) or 'Active' (A). If the variable is set to
   '0', users will be created as Active by default.
-  **$sys\_is\_project\_public = 1** is not absolutely necessary. It
   just seems useless to have restricted users if all projects are
   private.
-  **$sys\_allow\_anon = 0** is needed. Otherwise, anonymous users (i.e.
   users who have not logged in) would have more privilege than
   restricted users. So a restricted user would simply need to log out
   to be able to browse other projects, etc.
-  **$sys\_allow\_restricted\_users = 1** simply enables the
   'Restricted' status for users.

Restricted Shell
^^^^^^^^^^^^^^^^

By default, restricted users do not have a regular shell access: they
are given a restricted shell access that only supports a few command
(only 'cvs' today).

The default shell is '/usr/lib/tuleap/bin/cvssh-restricted'. It grants
CVS access to projects the user is member of, and forbid access to all
other projects repositories.

If you need to completely remove shell access (and forbid CVS), you need
to modify the shell manually in the administration interface for each
user: set it to /sbin/nologin.

Setup: in order to use CVS, the restricted user must do the following:

-  Set the 'CVS\_RSH' environment variable to 'ssh'
-  use the following command line: cvs
   -d:ext:username@example.com:/cvsroot/projectname co module

See also 'Tuleap Installation Guide'.

Setting restricted users privileges
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You may fine tune the privileges of restricted users on your system.
Simply copy
/usr/share/tuleap/site-content/en\_US/include/restricted\_user\_permissions.txt
in /etc/tuleap/site-content/en\_US/include/ and edit it. This is a
sample configuration file:

::

    // comment/uncomment forbidden URLs
    $forbidden_url = array(
              '/snippet/',     // Code Snippet Library
              '/softwaremap/', // browsable software map
              '/new/',         // list of the newest releases made on the Tuleap site
              '/search/',      // search for people, projects, and artifacts in trackers!
              '/people/',      // people skills and profile
              '/stats/',       // Tuleap site statistics
              '/top/',         // projects rankings (active, downloads, etc)
              '/project/register.php',    // Register a new project
              '/export/',      // Tuleap XML feeds
              '/info.php'      // PHP info
              );

    // Use true/false for those options
    $allow_welcome_page=false;// Allow access to Tuleap welcome page (at e.g. http://example.com/)
    $allow_news_browsing=false;     // Allow restricted users to read/comment news, including for their project
    $allow_user_browsing=true;      // Allow restricted users to access other user's page (Developer Profile)
    $allow_access_to_codendi_forums=true;   // Tuleap help forums are accessible through the 'Discussion Forums' link
    $allow_access_to_codendi_trackers=false;// Tuleap trackers are used for support requests on Tuleap
    $allow_access_to_codendi_docs=false; // Tuleap documents (Note that the User Guide is always accessible)
    $allow_access_to_codendi_mail=false; // Tuleap mailing lists (Developers Channels)

Other considerations
~~~~~~~~~~~~~~~~~~~~

-  Restricted users must be denied access to the pserver protocol to
   access CVS: only the SSH method is supported (through the restricted
   shell). If you want to disable the pserver access, make sure you
   edit/etc/xinetd.d/cvs, change the 'disable' parameter to 'yes' and
   restart xinetd (service xinetd restart). You may also fine-tune the
   configuration file to allow pserver for some IP addresses and deny it
   for others..
-  Access to projects web sites by Restricted Users is not controlled.
   If a project web site displays sensitive data, then it should put in
   place access restriction mechanisms (e.g. a '.htaccess' file).
-  **Subversion**: currently, if the sys\_allow\_restricted\_user
   variable is set to '1', subversion repositories have their default
   access policy changed: by default, only project members have read
   access (as well as write access). If other users need to access the
   SVN repository, they need to be individually added to the subversion
   access file (through the svn admin page).

Localize service names
----------------------

If you would like to add new system-wide or project-wide services please
note the following:

For those service names to be localized, we store a simple key for the
service label and description in the database. These keys are then
translated into the users current language by doing a look up of the key
in the site\_content/<*language*>/project/project.tab file.

The keys follow a simple pattern:

-  ``service_<service short name>_lbl_key`` for the service label
-  ``service_<service short name>_desc_key`` for the service description

To assure the correct localization when adding a new service please
follow the instructions below:

-  Choose ``service_<service short name>_lbl_key`` as service label
-  Choose ``service_<service short name>_desc_key`` as service
   description
-  Add two entries into each
   **site\_content/<*language*>/project/project.tab**
   `` project_admin_editservice   service_<service short name>_lbl_key <your localized service label> project_admin_editservice   service_<service short name>_desc_key    <your localized service description>``


Convert a CVS repository to Subversion
--------------------------------------

Some projects may want to switch from CVS to Subversion. There are many
good reasons for this, e.g. performance increase over CVS as well as
many new features like directory and symbolic link versioning, file and
directory move, truly atomic commits, etc.

Unfortunately, project members cannot do the full conversion process by
themselves because of permission issues.

Here are the step-by-step instructions:

-  Log in as root.
-  If not already done, install cvs2svn from
   `http://cvs2svn.tigris.org <http://cvs2svn.tigris.org>`_
-  Check that the SVN repository is empty:

   ::

       svnlook info /svnroot/projname

-  Then simply type:

   ::

       cvs2svn --existing-svnrepos -s /svnroot/projname --tmpdir=/tmp /cvsroot/projname

   You might need to add "--encoding=iso8859-1 --encoding=utf\_8" if the
   conversion process stops because of character encoding issues.
   **Note:** If the conversion fails with a Berkeley DB error, this
   might be caused by BDB version differences between the svn client
   (v1.2+) and the svn repository (v1.0 or v1.1). In this case, delete
   the old repository, and recreate it with the backend script.
   Actually, you should also upgrade all existing svn repositories that
   use the deprecated version of BDB...

-  This will convert the CVS repository with all the historical
   information (including all commits, tags and branches). To select a
   set of historical data, please read:
   `http://cvs2svn.tigris.org/cvs2svn.html <http://cvs2svn.tigris.org/cvs2svn.html>`_
-  You should then set proper ownership on the repository:

   ::

       chown -R codendiadm.projname /svnroot/projname

-  Activate the Subversion service in Tuleap if it is disabled.
-  You may also populate the Tuleap DB with subversion revision
   details: you need to execute as codendiadm
   '/usr/lib/tuleap/bin/commit-email.pl NNN' for each revision number
   (NNN) created. Please note however that CVS commits performed by
   people whose login name does not correspond to Tuleap logins won't
   appear.

Clean-up a Subversion repository
--------------------------------

Sometimes a user might ask you to clean-up a SVN repository because he
made mistakes in the import for instance.
Here is how to partially do it:

Delete (or archive) the SVN repository:

::

    tar cfz /var/tmp/projname_svn.tgz /svnroot/projname
    rm -rf /svnroot/projname

Then you need to clean-up the entries in the DB:

-  Get the repostory id from svn\_repositories table.
-  Manually execute this command

   ::

       DELETE FROM svn_commits WHERE repositoryid =your_repo_id;

WARNING: This will remove visible entries, but will keep "zombie"
entries in svn\_checkins, svn\_dirs and svn\_files

Validators for users' password
------------------------------

You can define rules to validate users' passwords. Here is an example of
rules :

-  Password must contain at least 8 characters
-  Password must contain at least 2 capital letter
-  Password must contain at least 3 non-digit characters
-  ...

See site-content/\*/account/password\_strategy.txt for details.

Add an expiration date on a user account
----------------------------------------

As an administrator you can add an expiration date to a user account in
several ways:

-  When creating a new user account, in the field expiration date. If
   you leave it blank, then no expiration date will be set.
-  In the pending user interface, after user registration.
-  By using the User Administration module, once you are on the user
   information page, you can add or modify the expiration date of a user
   account.

Once the date is reached, the account status becomes suspended. If you
want to expand the account validity, you have to reactivate the account
**and** change the expiration date.

How to change PhpWiki language for a project
-----------------------------------------

Once the language of a wiki is set for a project, it is "impossible" to
change it. If an admin made a mistake and activated the wiki for his
project in the wrong language, it is however possible to change it.

You will need to execute some SQL commands:

#. Search for the group\_id of the project you want to re-init the wiki
   (let's call this group\_id 'xxx').
#. Execute the following SQL commands:

   -  DELETE FROM wiki\_attachment WHERE group\_id = xxx
   -  DELETE FROM wiki\_attachment\_log WHERE group\_id = xxx
   -  DELETE FROM wiki\_group\_list WHERE group\_id = xxx
   -  DELETE FROM wiki\_log WHERE group\_id = xxx
   -  DELETE FROM wiki\_page WHERE group\_id = xxx

#. The wiki of the project has been removed. You can now activate it
   again with the right language.

Set a message of the day
------------------------

You can define a message of the day that will appear at the top of the page of each user, connected or not to the platform.

The message should be defined, according to the language, either in:

* /etc/tuleap/site-content/en_US/others/motd.txt
* or
* /etc/tuleap/site-content/fr_FR/others/motd.txt


Renamed project, mediawiki lost (Previous 7.3)
----------------------------------------------

Corresponds and fixed by `request #6630 Mediawiki db not renamed when project unixname is renamed <https://tuleap.net/plugins/tracker/?aid=6630>`_

Prior to 7.3, when a project got renamed (change of short name as site admin) mediawiki
was no longer available. The new version fix it but cannot recover automatically the
previous status.

To do it, you need:

* the project id ``<projectid>``
* the old shortname ``<oldname>``
* the new shortname ``<newname>``

You can do it by hand, as site admin by:

* Adding the reference in the DB: ``INSERT INTO plugin_mediawiki_database VALUES (<projectid>, 'plugin_mediawiki_<oldname>');``
* Updating the link in the DB: ``UPDATE service SET link = '/plugins/mediawiki/wiki/<newname>' WHERE group_id = <projectid> and shortname = 'plugin_mediawiki';``
* Rename the directory on filesystem ``mv /var/lib/tuleap/mediawiki/projects/<oldname>  /var/lib/tuleap/mediawiki/projects/<newname>``

Enable gitweb + tuleap
----------------------

This allows to browse git repositories using gitweb along standard Tuleap Gitphp.

* yum install gitweb-tuleap

* Verify these variables values (it depends on your gitolite and OS version) at /etc/gitweb.conf:

  .. sourcecode:: perl

    our $projectroot="/var/lib/codendi/gitolite/repositories";
    our $projects_list="/usr/com/gitolite/projects.list";

* By default Gitweb is available for all repositories, if you want it to be available for a subset of repositories  you should enable this variable in /etc/gitweb.conf:

  .. sourcecode:: perl

    $export_ok = "export_repo_ok";

  and add a "export_epo_ok" file under the git repository to be displayed via gitweb

* Update /etc/httpd/conf.d/gitweb-tuleap.conf regarding your auth config

* Add in /etc/gitweb.conf if you are using ldap

  .. sourcecode:: perl

      $feature{'auth_ldap'}{'default'} = [1];

* Restart service httpd

* Make sure that gitweb is working from the web at http://your_tuleap_url/gitweb/

